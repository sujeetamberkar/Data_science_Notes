##############################################################################################################################
Q1. What is an API? Give an example, where an API is used in real life.

 An API (Application Programming Interface) is a set of protocols and tools that allow different software applications to communicate with each other. It enables software to request services from another software application, not the user.

A real-life example is logging into an app using your Gmail account. Google provides an API that the app uses to request access to your Gmail account details. When you hit 'log in with Google', the app calls Google's API, which in turn sends the request to Google's servers. The servers respond with the requested details (if you have given permission), allowing you to log in.

Another example is a UPI (Unified Payments Interface) payment. Banks provide APIs that enable financial transactions. When you use a UPI payment app to send money, the app uses the bank's API to request transaction services (checking account balance, verifying the recipient's account, making the transfer). The bank's servers respond, and the transaction goes through.

##############################################################################################################################
Q2. Give advantages and disadvantages of using API.?

Advantages of APIs:
    Efficiency: APIs allow different software systems to communicate, speeding up processes.
    Integration: They enable different software systems to work together and share data.
    Automation: APIs can automate tasks by connecting different services.
    Scalability: APIs allow systems to expand and accommodate more users or services.

Disadvantages of APIs:

    Dependency: If an API changes or goes down, it could affect the dependent services.
    Security risks: If not properly secured, APIs can be a potential point of attack.
    Compatibility issues: Not all APIs work seamlessly with all systems.
    Complexity: APIs can add an additional layer of complexity to software development.
##############################################################################################################################
Q3. What is a Web API? Differentiate between API and Web API. ?

A Web API is a specific type of API that operates over the internet using HTTP protocol, enabling communication between different software systems on the web.

API vs Web API:

    An API (Application Programming Interface) is a general term referring to the interface that allows different software systems to communicate, irrespective of the medium of communication. APIs can be used for communication between parts of the same system (local/intra-system communication), or with external systems.

    A Web API, on the other hand, is a type of API that specifically facilitates interaction between different systems over the web using HTTP. It's a subset of APIs designed for web-based communication.

In essence, all Web APIs are APIs, but not all APIs are Web APIs. For example, operating system APIs used for intra-system communication aren't Web APIs.
##############################################################################################################################
Q4. Explain REST and SOAP Architecture. Mention shortcomings of SOAP.
ANS:
REST (Representational State Transfer) is an architectural style used in Web APIs. It utilizes HTTP methods (GET, POST, PUT, DELETE) to perform operations. REST is stateless, meaning each request from client to server must contain all the information needed to understand the request, and cannot take advantage of any stored context on the server. It's more flexible and easy to use, and generally best suited for web use due to its lightweight nature.

SOAP (Simple Object Access Protocol) is a protocol which is used for exchanging structured information in the implementation of web services using XML. It can work with any application layer protocol, such as HTTP, SMTP, TCP, etc., not just HTTP. SOAP provides robust security features and supports ACID transactions, which makes it suitable for high-security, reliable applications.

Shortcomings of SOAP:

    Complexity: SOAP is more complex and has a steep learning curve compared to REST.
    Overhead: Due to its extensive standards and XML usage, SOAP can be slower and require more bandwidth.
    Less flexible: SOAP is less flexible to cache and has strict rules to follow, making it less developer-friendly.
##############################################################################################################################
Q5. Differentiate between REST and SOAP.

REST (Representational State Transfer):

    It uses standard HTTP methods and is stateless.
    It's simpler and more flexible.
    Better suited for web-based applications due to its lightweight nature.
    Supports multiple data formats, not only XML.

SOAP (Simple Object Access Protocol):

    It's a protocol that can work with any application layer protocol, not just HTTP.
    It's more complex and robust.
    Offers high security and ACID transactions, suitable for secure, reliable applications.
    It uses XML for message exchange and has a heavier data footprint.
############################################################################################################################